// <auto-generated />
using System;
using CITNASDaily.Repositories.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CITNASDaily.Repositories.Migrations
{
    [DbContext(typeof(NASContext))]
    [Migration("20231102132705_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CITNASDaily.Entities.Models.ActivitiesSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivitiesOfTheDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfEntry")
                        .HasColumnType("datetime2");

                    b.Property<int>("NASId")
                        .HasColumnType("int");

                    b.Property<string>("SkillsLearned")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValuesLearned")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivitiesSummary");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.BiometricLog", b =>
                {
                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("No"));

                    b.Property<int>("Antipass")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnNo")
                        .HasColumnType("int");

                    b.Property<int>("GMNo")
                        .HasColumnType("int");

                    b.Property<string>("InOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NASId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProxyWork")
                        .HasColumnType("int");

                    b.Property<int>("TMNo")
                        .HasColumnType("int");

                    b.HasKey("No");

                    b.HasIndex("NASId");

                    b.ToTable("BiometricLog");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.NAS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EnNo")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OfficeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("UnitsAllowed")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YearLevel")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("NAS");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.OAS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OAS");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuperiorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuperiorId")
                        .IsUnique();

                    b.ToTable("Office");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BrokenSched")
                        .HasColumnType("bit");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NASId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalHours")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("NASId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.SummaryEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicPerformance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnrollmentAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<float>("SuperiorOverallRating")
                        .HasColumnType("real");

                    b.Property<string>("TimekeepingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitsAllowed")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("nasId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SummaryEvaluation");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.Superior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Superior");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.SuperiorEvaluationRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AttendanceAndPunctuality")
                        .HasColumnType("real");

                    b.Property<float>("AttitudeAndWorkBehaviour")
                        .HasColumnType("real");

                    b.Property<int>("NASId")
                        .HasColumnType("int");

                    b.Property<float>("OverallAssessment")
                        .HasColumnType("real");

                    b.Property<float>("OverallRating")
                        .HasColumnType("real");

                    b.Property<float>("QualOfWorkInput")
                        .HasColumnType("real");

                    b.Property<float>("QualOfWorkOutput")
                        .HasColumnType("real");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NASId");

                    b.ToTable("SuperiorEvaluationRating");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.TimekeepingSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Excused")
                        .HasColumnType("int");

                    b.Property<int?>("FailedToPunch")
                        .HasColumnType("int");

                    b.Property<int?>("LateOver10Mins")
                        .HasColumnType("int");

                    b.Property<int?>("LateOver45Mins")
                        .HasColumnType("int");

                    b.Property<double?>("MakeUpDutyHours")
                        .HasColumnType("float");

                    b.Property<int>("NASId")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int?>("Unexcused")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TimekeepingSummary");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.BiometricLog", b =>
                {
                    b.HasOne("CITNASDaily.Entities.Models.NAS", "NAS")
                        .WithMany("BiometricLogs")
                        .HasForeignKey("NASId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NAS");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.NAS", b =>
                {
                    b.HasOne("CITNASDaily.Entities.Models.Office", "Office")
                        .WithMany("NAS")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CITNASDaily.Entities.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("CITNASDaily.Entities.Models.NAS", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.OAS", b =>
                {
                    b.HasOne("CITNASDaily.Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.Office", b =>
                {
                    b.HasOne("CITNASDaily.Entities.Models.Superior", "Superior")
                        .WithOne()
                        .HasForeignKey("CITNASDaily.Entities.Models.Office", "SuperiorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Superior");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.Schedule", b =>
                {
                    b.HasOne("CITNASDaily.Entities.Models.NAS", "NAS")
                        .WithMany()
                        .HasForeignKey("NASId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NAS");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.Superior", b =>
                {
                    b.HasOne("CITNASDaily.Entities.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("CITNASDaily.Entities.Models.Superior", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.SuperiorEvaluationRating", b =>
                {
                    b.HasOne("CITNASDaily.Entities.Models.NAS", "NAS")
                        .WithMany()
                        .HasForeignKey("NASId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NAS");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.NAS", b =>
                {
                    b.Navigation("BiometricLogs");
                });

            modelBuilder.Entity("CITNASDaily.Entities.Models.Office", b =>
                {
                    b.Navigation("NAS");
                });
#pragma warning restore 612, 618
        }
    }
}
